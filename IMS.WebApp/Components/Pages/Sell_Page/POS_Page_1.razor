@page "/sellpage/{UserId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@using IMS.UseCases
@using IMS.UseCases.Activities
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IShoppingCartService ShoppingCartService

@inject IJSRuntime JSRuntime

<h3>Sell Page for "@UserId"</h3>
<br />

@if (cartItems != null && cartItems.Any())
{
    <EditForm Model="sellViewModel" OnValidSubmit="Sell" id="sell-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="po">Sell Order</label>
            <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber" readonly></InputText>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Branch Qty</th>
                    <th>Qty to Sell</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                        <td>@item.Product.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>
                            <InputNumber @bind-Value="item.QuantityToSell" class="form-control" />
                        </td>
                        <td>@(item.Product.Price * item.QuantityToSell)</td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Sell</button>

    </EditForm>

    <button @onclick="@(() => GoTo_Cart(UserId))">Go to Cart</button>

}


@code {
    public string UserEmail = "";

    [Parameter]
    public string UserId { get; set; }
    private List<CartItemViewModel> cartItems;
    private SellViewModel sellViewModel = new SellViewModel();


    protected override async Task OnInitializedAsync()
    {
        var cart = await ShoppingCartService.GetCartByUserIdAsync(UserId);
        cartItems = cart?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                QuantityToSell = 0,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

        // Generate sales order number
        sellViewModel.SalesOrderNumber = GenerateSalesOrderNumber();

    }

    private string GenerateSalesOrderNumber()
    {
        // return $"SO-{DateTime.Now:yyyyMMddHHmmss}-{UserId[0,3]}";


        var now = DateTime.Now;
        var year = now.ToString("yy"); // Last 2 digits of the year
        var month = now.ToString("MM"); // Month number
        var day = now.ToString("dd"); // Day
        var hour = now.ToString("HH"); // Hour
        var minute = now.ToString("mm"); // Minute
                                         // var second = now.ToString("ss"); // Second

        var branchIdPart = UserId.Length >= 3 ? UserId.Substring(0, 3) : UserId;

        return $"SO-{year}{month}{day}{hour}{minute}-{branchIdPart}";
    }

    private async Task Sell()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        UserEmail = authState.User.Identity?.Name;

        foreach (var item in cartItems)
        {
            if (item.QuantityToSell > 0 && item.QuantityToSell <= item.Quantity)
            {
                await SellProductUseCase.ExecuteAsync(
                    sellViewModel.SalesOrderNumber,
                    item.Product,
                    item.QuantityToSell,
                    item.UnitPrice,
                    UserId, // Pass user information
                    UserEmail
                );

                item.Quantity -= item.QuantityToSell;
                if (item.Quantity <= 0)
                {
                    await ShoppingCartService.RemoveCartItemAsync(item.CartItemId);
                }
                else
                {
                    await ShoppingCartService.UpdateCartItemAsync(item.CartItemId, item.Quantity);
                }
            }
        }

        // Refresh the cartItems after selling
        cartItems = (await ShoppingCartService.GetCartByUserIdAsync(UserId))?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                QuantityToSell = 0,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

        // Generate a new sales order number after selling
        sellViewModel.SalesOrderNumber = GenerateSalesOrderNumber();
    }


    public async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;
        return list.Select(x => new ItemViewModel { Id = x.ProductID, Name = x.ProductName })?.ToList();
    }

    private async Task GoTo_Cart(string userId)
    {
        NavigationManager.NavigateTo($"/usercart/{userId}");
    }

}
