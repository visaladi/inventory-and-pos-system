@page "/branchproduct"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using IMS.UseCases.PluginInterfaces
@using IMS.UseCases
@using IMS.UseCases.Products
@using System.Security.Claims

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager

@inject IProductRepository ProductRepository
@inject IShoppingCartService ShoppingCartService
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase

@*
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "Admin")]
 *@


<h1>Products List - @email</h1>

@if (users != null)
{
    <div class="col-md-6">
        <label for="selectedUser">Select User:</label>
        <select @bind="selectedUserId" class="form-control">
            <option>Select Branch</option>
            @foreach (var user in users)
            {
                <option value="@user.Id">@user.UserName</option>
            }
        </select>
    </div>
}
<button @onclick="@(() => GoTo_Cart(selectedUserId))">Go to Cart</button>

@errorMsg


<div class="row">
    @if (products == null)
    {
        <p>Loading products...</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Total Qty</th>
                    <th>Branch Qty</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    if (product != null)
                    {
                        <tr>
                            <td><img src="@product.ImgUrl" height="50" width="50" /></td>
                            <td>@product.ProductName</td>
                            <td>@product.Price</td>
                            <td>@product.Quantity</td>
                            <td>
                                <input type="number" min="1" @bind="quantities[product.ProductID]" class="form-control" />
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <button class="btn btn-primary" @onclick="AddAllToCart">Add All to Cart</button>
    }
</div>

@code {
    private string email = "";
    private string errorMsg = "";
    private IEnumerable<Product> products;
    private string selectedUserId;
    private List<IdentityUser>? users;
    private int selectedQuantity;

    private Dictionary<int, int> quantities = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        email = authState.User.Identity?.Name;
        products = (await ViewProductsByNameUseCase.ExecuteAsync("")).ToList();

        try
        {
            users = UserManager.Users.ToList();
        }
        catch (Exception ex)
        {
            errorMsg = $"Error retrieving users: {ex.Message}";
        }

        foreach (var product in products)
        {
            quantities[product.ProductID] = 0;
        }
    }

    private async Task AddAllToCart()
    {
        if (string.IsNullOrEmpty(selectedUserId))
        {
            errorMsg = "No User is Selected!";
            return;
        }

        foreach (var product in products)
        {
            if (product != null)
            {
                if (quantities.TryGetValue(product.ProductID, out var selectedQuantity) && selectedQuantity > 0)
                {
                    product.Quantity -= selectedQuantity;
                    await ProductRepository.UpdateProductAsync(product);
                    await ShoppingCartService.AddItemToCartAsync(selectedUserId, product.ProductID, selectedQuantity);

                    errorMsg = $"{selectedQuantity} {product.ProductName} added to {selectedUserId}'s cart";
                }
            }
        }

        products = (await ViewProductsByNameUseCase.ExecuteAsync("")).ToList();
    }


    private async Task GoTo_Cart(string userId)
    {
        NavigationManager.NavigateTo($"/usercart/{userId}");
    }

}
