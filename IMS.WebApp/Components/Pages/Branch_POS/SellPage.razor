@page "/sellpage/{UserId}"
@rendermode InteractiveServer

@using IMS.UseCases
@using IMS.UseCases.Activities
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IShoppingCartService ShoppingCartService

@inject IJSRuntime JSRuntime

<h3>Sell Page for @UserId</h3>
<br />

@if (cartItems != null && cartItems.Any())
{
    <EditForm Model="sellViewModel" OnValidSubmit="Sell" id="sell-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="po">Sell Order</label>
            <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber"></InputText>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                        <td>@item.Product.ProductName</td>
                        @* <td>@item.Quantity</td> *@
                        <td>
                            <InputNumber @bind-Value="item.QuantityToSell" class="form-control" />
                        </td>
                        <td>@(item.Product.Price * item.QuantityToSell)</td>
                        <td>
                            <button @onclick="@(() => SelectItemForSale(item))">Sell</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </EditForm>
}


@code {
    [Parameter]
    public string UserId { get; set; }
    private List<CartItemViewModel> cartItems;
    private SellViewModel sellViewModel = new SellViewModel();

    // private Product? selectedProduct = null;
    protected override async Task OnInitializedAsync()
    {
        var cart = await ShoppingCartService.GetCartByUserIdAsync(UserId);
        cartItems = cart?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                // QuantityToSell = 0,
                QuantityToSell = ci.Quantity,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

    }

    private void SelectItemForSale(CartItemViewModel item)
    {
        if (item.QuantityToSell > 0 && item.QuantityToSell <= item.Quantity)
        {
            var sellItem = new SellItemViewModel
                {
                    CartItemId = item.CartItemId,
                    ProductId = item.ProductId,
                    Product = item.Product,
                    UnitPrice = item.UnitPrice,
                    QuantityToSell = item.QuantityToSell
                };

            sellViewModel.ItemsToSell.Add(sellItem);
        }

    }


    private async Task Sell()
    {
        foreach (var item in sellViewModel.ItemsToSell)
        {
            if (item.Product != null)
            {
                await SellProductUseCase.ExecuteAsync(
                    sellViewModel.SalesOrderNumber,
                    item.Product,
                    item.QuantityToSell,
                    item.UnitPrice
                );

                // await ShoppingCartService.RemoveCartItemAsync(item.CartItemId);
                var cartItem = cartItems.FirstOrDefault(ci => ci.CartItemId == item.CartItemId);
                if (cartItem != null)
                {
                    cartItem.Quantity -= item.QuantityToSell;
                    if (cartItem.Quantity <= 0)
                    {
                        cartItems.Remove(cartItem);
                        await ShoppingCartService.RemoveCartItemAsync(item.CartItemId);
                    }
                    else
                    {
                        await ShoppingCartService.UpdateCartItemAsync(cartItem.CartItemId, cartItem.Quantity);
                    }
                }

            }
        }

        cartItems = (await ShoppingCartService.GetCartByUserIdAsync(UserId))?.Items?.Select(ci => new CartItemViewModel
            {
                CartItemId = ci.CartItemId,
                ProductId = ci.ProductId,
                Quantity = ci.Quantity,
                // QuantityToSell = 0,
                QuantityToSell = ci.Quantity,
                UnitPrice = ci.Product.Price,
                Product = ci.Product
            }).ToList() ?? new List<CartItemViewModel>();

        sellViewModel = new SellViewModel();

    }

    public async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;
        return list.Select(x => new ItemViewModel { Id = x.ProductID, Name = x.ProductName })?.ToList();
    }

}
