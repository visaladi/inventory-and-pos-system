@page "/sellpage/{UserId}"
@rendermode InteractiveServer

@using IMS.UseCases
@using IMS.UseCases.Activities
@using IMS.UseCases.Activities.Interfaces
@using IMS.UseCases.Products
@using IMS.UseCases.Products.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase
@inject IShoppingCartService ShoppingCartService

@inject IJSRuntime JSRuntime

<h3>Sell Page for @UserId</h3>
<br />

@if (cartItems != null && cartItems.Any())
{
    <EditForm Model="sellViewModel" OnValidSubmit="Sell" id="sell-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="po">Sell Order</label>
            <InputText id="po" class="form-control" @bind-Value="sellViewModel.SalesOrderNumber"></InputText>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cartItems)
                {
                    <tr>
                        <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                        <td>@item.Product.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@(item.Product.Price * item.Quantity)</td>
                        <td>
                            <button @onclick="@(() => SelectItemForSale(item))">Sell</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    </EditForm>
}


@code {
    [Parameter]
    public string UserId { get; set; }
    private List<CartItem> cartItems;
    private SellViewModel sellViewModel = new SellViewModel();

    // private Product? selectedProduct = null;
    protected override async Task OnInitializedAsync()
    {
        cartItems = (await ShoppingCartService.GetCartByUserIdAsync(UserId))?.Items?.ToList() ?? new List<CartItem>();
    }

    private void SelectItemForSale(CartItem item)
    {
        sellViewModel.ProductId = item.ProductId;
        sellViewModel.Product = item.Product;
        sellViewModel.UnitPrice = item.Product.Price;
        sellViewModel.QuantityToSell = item.Quantity;
    }


    private async Task Sell()
    {
        if (sellViewModel.Product != null)
        {
            await SellProductUseCase.ExecuteAsync(
                sellViewModel.SalesOrderNumber,
                sellViewModel.Product,
                sellViewModel.QuantityToSell,
                sellViewModel.UnitPrice
            );

            // Update cart and product quantities
            await ShoppingCartService.RemoveCartItemAsync(cartItems.First(ci => ci.ProductId == sellViewModel.ProductId).CartItemId);
            cartItems = (await ShoppingCartService.GetCartByUserIdAsync(UserId))?.Items?.ToList() ?? new List<CartItem>();

            sellViewModel = new SellViewModel();
        }
    }

    public async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;
        return list.Select(x => new ItemViewModel { Id = x.ProductID, Name = x.ProductName })?.ToList();
    }

}
