@page "/productreport"
@rendermode InteractiveServer
@using IMS.UseCases.Reports.interfaces
@using IMS.WebApp.ViewModels
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<IdentityUser> UserManager
@inject ISearchProductTransactionUseCase SearchProductTransactionUseCase
@inject IJSRuntime JSRuntime

@* @attribute [Authorize(Policy = "Admin")] *@

<h3>Sales Product Transactions</h3>
<br />

<div class="printarea">
    <div class="row">
        <div class="col">
            <label for="so">Sell Order</label>
            <input type="text" id="so" class="form-control" @bind-value="sellOrder" placeholder="Sell Order" />
        </div>
        <div class="col">
            <label for="prod">Product Name</label>
            <input type="text" id="prod" class="form-control" @bind-value="prodName" placeholder="Search by Name" />
        </div>
        <div class="col">
            <label for="df">Date From</label>
            <input type="date" id="df" class="form-control" @bind-value="dateFrom" />
        </div>
        <div class="col">
            <label for="dt">Date To</label>
            <input type="date" id="dt" class="form-control" @bind-value="dateTo" />
        </div>


        <div class="col">
            <label for="userEmail">User Email</label>
            <select id="userEmail" class="form-control" @bind="selectedUserEmail">
                <option value="">Select User</option>
                @foreach (var email in userEmails)
                {
                    <option value="@email">@email</option>
                }
            </select>
        </div>


        <div class="col">
            <label>&nbsp;</label>
            <button type="button" class="btn btn-primary form-control" @onclick="SearchProducts">Search</button>
        </div>
    </div>
    <br />
    @if (productTransactions != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>SO#</th>
                    <th>Date</th>
                    <th>Product</th>
                    <th>Unit Price</th>
                    <th>Sold Quantity</th>
                    <th>Total Price</th>
                    <th>User Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var it in productTransactions)
                {
                    <tr>
                        <td>@it.SONumber</td>
                        <td>@it.TransactionDate.ToString("MM/dd/yyyy")</td>
                        <td>@it.Product.ProductName</td>
                        <td>Rs. @it.UnitPrice?.ToString()</td>
                        <td>@it.SoldQuantity</td>
                        <td>@it.TotalPrice</td>
                        <td>@(userEmailsDictionary.ContainsKey(it.UserId) ? userEmailsDictionary[it.UserId] : "Unknown")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    private string sellOrder = string.Empty;
    private string prodName = string.Empty;
    private DateTime? dateFrom;
    private DateTime? dateTo;
    private int activityTypeId = 2;
    private string selectedUserEmail = string.Empty;
    private IEnumerable<ProductTransaction>? productTransactions;
    private List<string> userEmails = new List<string>();
    private Dictionary<string, string> userEmailsDictionary = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        userEmails = await LoadUserEmails();
        await SearchProducts();
    }

    private async Task<List<string>> LoadUserEmails()
    {
        var users = await UserManager.Users.ToListAsync();
        return users.Select(u => u.Email).ToList();
    }

    private async Task<string> GetUserEmail(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        return user?.Email ?? "Unknown";
    }

    private async Task SearchProducts()
    {
        ProductTransactionType? prodType = (ProductTransactionType)activityTypeId;
        productTransactions = await SearchProductTransactionUseCase.ExecuteAsync(sellOrder, prodName, dateFrom, dateTo, prodType, selectedUserEmail);

        userEmailsDictionary.Clear();
        foreach (var transaction in productTransactions)
        {
            if (!userEmailsDictionary.ContainsKey(transaction.UserId))
            {
                var email = await GetUserEmail(transaction.UserId);
                userEmailsDictionary[transaction.UserId] = email;
            }
        }
    }

}
