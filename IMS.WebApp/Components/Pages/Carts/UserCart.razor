@page "/usercart/{UserId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using IMS.UseCases
@inject IShoppingCartService shoppingCartService

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Logged In User - @email</h1>
<h1>Cart User - @UserId</h1>

@if (cart != null && cart.Items != null && cart.Items.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Image</th>
                <th>Product Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @* @foreach (var item in cartitems) *@
            @foreach (var item in cart.Items)
            {
                <tr>
                    <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                    <td>@item.Product.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@(item.Product.Price * item.Quantity)</td>
                    <td>
                        <button @onclick="@(() => RemoveFromCart(item.CartItemId))">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Your cart is currently empty.</p>
}

@code {
    [Parameter]
    public string UserId { get; set; }
    private string? email;
    private Cart? cart;
    private List<CartItem> cartitems;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        email = authState.User.Identity?.Name;

        cart = await shoppingCartService.GetCartByUserIdAsync(UserId);
        cartitems = cart?.Items?.ToList() ?? new List<CartItem>();
    }

    private async Task RemoveFromCart(int cartItemId)
    {
        await shoppingCartService.RemoveCartItemAsync(cartItemId);
        // cartitems = await shoppingCartService.GetCartByUserIdAsync(UserId); // Refresh cart items after removal
    }


    #region Test 01
    // // From ChatGPT
    // private string? email;
    // private Cart? cart;
    // private IShoppingCartService cartService;

    // protected override async Task OnInitializedAsync()
    // {
    //     var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //     email = authState.User.Identity?.Name;

    //     cartService = shoppingCartService;
    //     if (email != null)
    //     {
    //         cart = await cartService.GetCartByUserIdAsync(email);
    //     }
    // }

    // private async Task RemoveFromCart(int cartItemId)
    // {
    //     await cartService.RemoveCartItemAsync(cartItemId);
    //     if (email != null)
    //     {
    //         cart = await cartService.GetCartByUserIdAsync(email); // Refresh cart after removal
    //     }
    // }
    #endregion

}

