@page "/usercart/{UserId}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

@using IMS.UseCases
@inject IShoppingCartService shoppingCartService

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>

    <h1>Logged In User - @email</h1>
    <h1>Cart User - @UserId</h1>

    @if (cart != null && cart.Items != null && cart.Items.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Image</th>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in cart.Items)
                {
                    <tr>
                        <td><img src="@item.Product.ImgUrl" width="50" height="50" /></td>
                        <td>@item.Product.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@(item.Product.Price * item.Quantity)</td>

                        <AuthorizeView Policy="Admin">
                            <Authorized>
                                <td>
                                    <button @onclick="@(() => RemoveFromCart(item.CartItemId))">Remove</button>
                                </td>
                            </Authorized>
                        </AuthorizeView>

                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Your cart is currently empty.</p>
    }

    <button type="button" class="btn btn-primary" @onclick="SellPage">Go To POS</button>

</CascadingAuthenticationState>

@code {
    [Parameter]
    public string UserId { get; set; }
    private string? email;
    private Cart? cart;
    private List<CartItem> cartitems;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        email = authState.User.Identity?.Name;

        cart = await shoppingCartService.GetCartByUserIdAsync(UserId);
        cartitems = cart?.Items?.ToList() ?? new List<CartItem>();
    }

    private async Task RemoveFromCart(int cartItemId)
    {
        await shoppingCartService.RemoveCartItemAsync(cartItemId);
    }

    private void SellPage()
    {
        NavigationManager.NavigateTo($"/sellpage/{UserId}");
    }

}

